#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"
#include "driver/ledc.h"
//Este código funciona para simulación en Wowki, sin embargo para que funcione en físico se debe omitir el void setup()
//y void loop() e ingresarlos en void app_main()

#define LEFT_BUTTON GPIO_NUM_2 // Reemplazado con el número GPIO para el botón izquierdo
#define RIGHT_BUTTON GPIO_NUM_5 // Reemplazado con el número GPIO para el botón derecho
#define SERVO_CHANNEL LEDC_CHANNEL_0 // Reemplazado con el canal LEDC deseado para el servo
#define SERVO_PIN GPIO_NUM_15 // Reemplazado con el número GPIO al que está conectado el servo
#define ANGLE_STEP 5 // Ajuste del paso al que cambia el ángulo
int angle = 0; // Ángulo inicial, ajustado acorde sea ocupado

void setup() {
  gpio_config_t io_conf;
  io_conf.intr_type = GPIO_INTR_DISABLE;
  io_conf.mode = GPIO_MODE_INPUT;
  io_conf.pin_bit_mask = (1ULL << LEFT_BUTTON) | (1ULL << RIGHT_BUTTON);
  io_conf.pull_up_en = GPIO_PULLUP_ENABLE;
  io_conf.pull_down_en = GPIO_PULLDOWN_DISABLE;
  gpio_config(&io_conf);

  // Configuración del canal PWM para el servo
  ledc_timer_config_t timer_conf;
  timer_conf.duty_resolution = LEDC_TIMER_16_BIT;
  timer_conf.freq_hz = 50;
  timer_conf.speed_mode = LEDC_HIGH_SPEED_MODE;
  timer_conf.timer_num = LEDC_TIMER_0;
  ledc_timer_config(&timer_conf);

  ledc_channel_config_t channel_conf;
  channel_conf.channel = SERVO_CHANNEL;
  channel_conf.duty = 0;
  channel_conf.gpio_num = SERVO_PIN;
  channel_conf.speed_mode = LEDC_HIGH_SPEED_MODE;
  channel_conf.timer_sel = LEDC_TIMER_0;
  ledc_channel_config(&channel_conf);

  // Inicialización del servo a la posición predeterminada 
  int servoDutyCycle = map(angle, 0, 180, 0, 65535);
  ledc_set_duty(LEDC_HIGH_SPEED_MODE, SERVO_CHANNEL, servoDutyCycle);
  ledc_update_duty(LEDC_HIGH_SPEED_MODE, SERVO_CHANNEL);
}

int lastLeftButtonState = 1;  // Se asume que el botón no es presionado inicialmente
int lastRightButtonState = 1; // Se asume que el botón no es presionado inicialmente

void loop() {
  int leftButtonState = gpio_get_level(LEFT_BUTTON);
  int rightButtonState = gpio_get_level(RIGHT_BUTTON);

  int servoDutyCycle = map(angle, 0, 180, 0, 65535);

if (leftButtonState == 0 && lastLeftButtonState == 1) {
  // Botón izquierdo presionado, aumenta el ángulo
  if (angle < 180) {
    angle += ANGLE_STEP;
    if (angle > 180) {
      angle = 180;
    }
    // Actualización de la posición del servo
    int servoDutyCycle = map(angle, 0, 180, 0, 65535);
    ledc_set_duty(LEDC_HIGH_SPEED_MODE, SERVO_CHANNEL, servoDutyCycle);
    ledc_update_duty(LEDC_HIGH_SPEED_MODE, SERVO_CHANNEL);
  }
}
lastLeftButtonState = leftButtonState;

if (rightButtonState == 0 && lastRightButtonState == 1) {
  // Botón derecho presionado, disminuye el ángulo
  if (angle > 0) {
    angle -= ANGLE_STEP;
    if (angle < 0) {
      angle = 0;
    }
    // Actualización de la posición del servo
    int servoDutyCycle = map(angle, 0, 180, 0, 65535);
    ledc_set_duty(LEDC_HIGH_SPEED_MODE, SERVO_CHANNEL, servoDutyCycle);
    ledc_update_duty(LEDC_HIGH_SPEED_MODE, SERVO_CHANNEL);
  }
}
lastRightButtonState = rightButtonState;

  vTaskDelay(pdMS_TO_TICKS(100));
}

void app_main() {
  setup();
  while (1) {
    loop();
  }
}